/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include <stdio.h>
#include <stdlib.h>
#include <termios.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ioctl.h>
#include <string.h>
#include <linux/serial.h>

#include <android/log.h>

#define LOG_TAG "UART-NATIVE"

#define LOGV(...)__android_log_print(ANDROID_LOG_VERBOSE,LOG_TAG,__VA_ARGS__)
#define LOGD(...)__android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__)
#define LOGI(...)__android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)
#define LOGW(...)__android_log_print(ANDROID_LOG_WARN,LOG_TAG,__VA_ARGS__)
#define LOGE(...)__android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)

#define _POSIX_SOURCE 1

//typedef unsigned int bool;

#define false 0
#define true 1

/**
 * Structure of terminal input / output system.
 */
struct termios oldtio , newtio;

/* Header for class com_nexcom_johnsonfactorytest_NexcomUART */

#ifndef _Included_com_nexcom_johnsonfactorytest_NexcomUART
#define _Included_com_nexcom_johnsonfactorytest_NexcomUART
#ifdef __cplusplus
extern "C" {
#endif

bool isUTF8(const void* pBuffer, long size);

/*
 * Class:     com_nexcom_johnsonfactorytest_NexcomUART
 * Method:    openUART
 * Signature: (Ljava/lang/String;III)I
 */
JNIEXPORT jint JNICALL Java_com_nexcom_ufc_NexcomJNI_openUART
  (JNIEnv *env, jobject obj, jstring dev, jint baudrate, jint mode);

/*
 * Class:     com_nexcom_johnsonfactorytest_NexcomUART
 * Method:    closeUART
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_nexcom_ufc_NexcomJNI_closeUART
  (JNIEnv *env, jobject obj, jint fd);

/*
 * Class:     com_nexcom_johnsonfactorytest_NexcomUART
 * Method:    sendUART
 * Signature: (ILjava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_com_nexcom_ufc_NexcomJNI_sendUART
  (JNIEnv *env, jobject obj, jint fd, jstring msg, jint format);

/*
 * Class:     com_nexcom_johnsonfactorytest_NexcomUART
 * Method:    receiveUART
 * Signature: (I)I
 */
JNIEXPORT jstring JNICALL Java_com_nexcom_ufc_NexcomJNI_receiveUART
  (JNIEnv *env, jobject obj, jint fd);

/*
 * Class:     com_nexcom_johnsonfactorytest_NexcomUART
 * Method:    mcuTest
 * Signature: (Ljava/lang/String;[C[C)I
 */
JNIEXPORT jint JNICALL Java_com_nexcom_ufc_NexcomJNI_mcuTest
        (JNIEnv *env, jobject obj, jstring dev, jbyteArray dataIn, jbyteArray dataOut);

/*
 * Class:     com_nexcom_johnsonfactorytest_NexcomUART
 * Method:    mcuTest
 * Signature: (Ljava/lang/String;[C[C)I
 */
JNIEXPORT jint JNICALL Java_com_nexcom_ufc_NexcomJNI_mcuReceice
        (JNIEnv *env, jobject obj, jint fd, jbyteArray dataOut);

/*
 * Class:     com_nexcom_johnsonfactorytest_NexcomUART
 * Method:    nPingIP
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_nexcom_ufc_NexcomJNI_nPingIP
        (JNIEnv *env, jobject obj, jstring msg);

/*
 * Class:     com_nexcom_johnsonfactorytest_NexcomUART
 * Method:    changeHDMI
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_nexcom_ufc_NexcomJNI_changeHDMI
        (JNIEnv *env, jobject obj, jint port);

/*
 * Class:     com_nexcom_johnsonfactorytest_NexcomUART
 * Method:    systemCommand
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_nexcom_ufc_NexcomJNI_systemCommand
        (JNIEnv *env, jobject obj, jstring msg);
/*
 * Class:     com_nexcom_johnsonfactorytest_NexcomUART
 * Method:    rs485Test
 * Signature: (Ljava/lang/String;[C[C)I
 */
JNIEXPORT jint JNICALL Java_com_nexcom_ufc_NexcomJNI_rs485Test
        (JNIEnv *env, jobject obj, jstring dev, jbyteArray dataIn, jbyteArray dataOut);

#ifdef __cplusplus
}
#endif
#endif
